/*
 * Generated Tests
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-09T18:48:48.640Z
 * AI Model: gemini-1.5-flash
 * Execution Time: 59.42s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

```javascript
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("ELLIE", function () {
  let ellie;
  let owner;
  let addr1;
  let addr2;
  let uniswapV2Router;

  beforeEach(async function () {
    [owner, addr1, addr2] = await ethers.getSigners();
    const Ellie = await ethers.getContractFactory("ELLIE");
    ellie = await Ellie.deploy();
    await ellie.deployed();
  });

  describe("Deployment", function () {
    it("Should set the right owner", async function () {
      expect(await ellie.owner()).to.equal(owner.address);
    });
    it("Should have correct initial balances", async function () {
      expect(await ellie.balanceOf(owner.address)).to.equal(ethers.utils.parseEther("100000000000"));
    });
  });

  describe("Function Tests", function () {
    beforeEach(async function () {
      await ellie.openTrading();
      uniswapV2Router = await ethers.getContractAt("IUniswapV2Router02", "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D");
    });
    it("Should transfer tokens correctly", async function () {
      await ellie.transfer(addr1.address, ethers.utils.parseEther("10"));
      expect(await ellie.balanceOf(addr1.address)).to.equal(ethers.utils.parseEther("10"));
    });
    it("Should approve tokens correctly", async function () {
      await ellie.approve(addr1.address, ethers.utils.parseEther("100"));
      expect(await ellie.allowance(owner.address, addr1.address)).to.equal(ethers.utils.parseEther("100"));
    });
    it("Should transferFrom tokens correctly", async function () {
      await ellie.approve(addr1.address, ethers.utils.parseEther("100"));
      await ellie.transferFrom(owner.address, addr2.address, ethers.utils.parseEther("10"));
      expect(await ellie.balanceOf(addr2.address)).to.equal(ethers.utils.parseEther("10"));
    });
    it("Should swap tokens for ETH correctly", async function () {
      await ellie.transfer(addr1.address, ethers.utils.parseEther("100"));
      const balanceBefore = await ethers.provider.getBalance(ellie.address);
      await ellie.connect(addr1).transfer(ellie.address, ethers.utils.parseEther("10"));
      await ellie.manualSwap();
      const balanceAfter = await ethers.provider.getBalance(ellie.address);
      expect(balanceAfter).to.be.gt(balanceBefore);
    });

    it("Should emit Transfer event", async function () {
      await expect(ellie.transfer(addr1.address, ethers.utils.parseEther("10")))
        .to.emit(ellie, "Transfer")
        .withArgs(owner.address, addr1.address, ethers.utils.parseEther("10"));
    });
    it("Should emit Approval event", async function () {
      await expect(ellie.approve(addr1.address, ethers.utils.parseEther("100")))
        .to.emit(ellie, "Approval")
        .withArgs(owner.address, addr1.address, ethers.utils.parseEther("100"));
    });
    it("Should emit OwnershipTransferred event", async function () {
        await expect(ellie.renounceOwnership())
            .to.emit(ellie, "OwnershipTransferred")
            .withArgs(owner.address, ethers.constants.AddressZero);
    });
  });


  describe("Edge Cases", function () {
    it("Should revert if transfer amount exceeds balance", async function () {
      await expect(ellie.transfer(addr1.address, ethers.utils.parseEther("100000000000000000000000000"))).to.be.reverted;
    });
    it("Should revert if transfer amount exceeds maxTxAmount", async function () {
      await ellie.openTrading();
      await expect(ellie.transfer(addr1.address, ellie._maxTxAmount().add(1))).to.be.reverted;
    });
    it("Should revert if transfer amount exceeds maxWalletSize", async function () {
      await ellie.openTrading();
      await expect(ellie.transfer(addr1.address, ellie._maxWalletSize().add(1))).to.be.reverted;
    });
    it("Should revert if trying to transfer to zero address", async function () {
      await expect(ellie.transfer(ethers.constants.AddressZero, ethers.utils.parseEther("10"))).to.be.reverted;
    });
    it("Should revert if trying to approve from zero address", async function () {
      await expect(ellie.approve(ethers.constants.AddressZero, ethers.utils.parseEther("10"))).to.be.reverted;
    });
    it("Should revert if trying to approve to zero address", async function () {
      await expect(ellie.approve(addr1.address, ethers.constants.AddressZero)).to.be.reverted;
    });
    it("Should revert if transferFrom amount exceeds allowance", async function () {
      await expect(ellie.transferFrom(owner.address, addr2.address, ethers.utils.parseEther("10"))).to.be.reverted;
    });
    it("Should revert if not owner calls onlyOwner functions", async function () {
      await expect(ellie.connect(addr1).renounceOwnership()).to.be.reverted;
      await expect(ellie.connect(addr1).removeLimits()).to.be.reverted;
    });
    it("Should revert if manualSwap is called by non-taxWallet", async function () {
      await expect(ellie.connect(addr1).manualSwap()).to.be.reverted;
    });
    it("Should revert if manualsend is called by non-taxWallet", async function () {
      await expect(ellie.connect(addr1).manualsend()).to.be.reverted;
    });

  });

  describe("Gas Usage Tests", function () {
    it("Should test gas usage for transfer", async function () {
      const tx = await ellie.transfer(addr1.address, ethers.utils.parseEther("10"));
      const receipt = await tx.wait();
      console.log("Gas used for transfer:", receipt.gasUsed.toString());
    });
    it("Should test gas usage for approve", async function () {
      const tx = await ellie.approve(addr1.address, ethers.utils.parseEther("100"));
      const receipt = await tx.wait();
      console.log("Gas used for approve:", receipt.gasUsed.toString());
    });
     it("Should test gas usage for transferFrom", async function () {
      await ellie.approve(addr1.address, ethers.utils.parseEther("100"));
      const tx = await ellie.transferFrom(owner.address, addr2.address, ethers.utils.parseEther("10"));
      const receipt = await tx.wait();
      console.log("Gas used for transferFrom:", receipt.gasUsed.toString());
    });
  });
});
```