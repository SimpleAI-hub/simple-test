/*
 * Generated Tests
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-09T20:28:19.407Z
 * AI Model: gemini-1.5-flash
 * Execution Time: 40.63s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

```javascript
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Counter", function () {
  let counter;
  let owner;
  let addr1;
  let addr2;

  beforeEach(async function () {
    [owner, addr1, addr2] = await ethers.getSigners();
    const Counter = await ethers.getContractFactory("Counter");
    counter = await Counter.deploy();
  });

  describe("Deployment", function () {
    it("Should set the right owner", async function () {
      expect(await counter.owner()).to.equal(owner.address);
    });
    it("Should initialize count to 0", async function () {
      expect(await counter.getCount()).to.equal(0);
    });
  });

  describe("Function Tests", function () {
    it("Should increment count", async function () {
      await counter.increment();
      expect(await counter.getCount()).to.equal(1);
    });
    it("Should decrement count", async function () {
      await counter.increment();
      await counter.decrement();
      expect(await counter.getCount()).to.equal(0);
    });
    it("Should reset count", async function () {
      await counter.increment();
      await counter.reset();
      expect(await counter.getCount()).to.equal(0);
    });
    it("Should get count", async function () {
      await counter.increment();
      expect(await counter.getCount()).to.equal(1);
    });
    it("Should emit events", async function () {
      await expect(counter.increment()).to.emit(counter, "CountIncremented");
      await expect(counter.decrement()).to.emit(counter, "CountDecremented");
      await expect(counter.reset()).to.emit(counter, "CountReset");

    });
  });

  describe("Edge Cases", function () {
    it("Should revert if decrementing from 0", async function () {
      await expect(counter.decrement()).to.be.revertedWith("Count cannot be negative");
    });
    it("Should revert if non-owner tries to reset", async function () {
      await expect(counter.connect(addr1).reset()).to.be.revertedWith("Only owner can reset");
    });
    it("Should handle large numbers", async function () {
      for (let i = 0; i < 100; i++) {
        await counter.increment();
      }
      expect(await counter.getCount()).to.equal(100);
      for (let i = 0; i < 50; i++) {
        await counter.decrement();
      }
      expect(await counter.getCount()).to.equal(50);

    });
  });

  describe("Gas Usage", function () {
    it("Should measure increment gas cost", async function () {
      const tx = await counter.increment();
      const receipt = await tx.wait();
      console.log("Increment Gas Used:", receipt.gasUsed.toString());
      expect(receipt.gasUsed.toNumber()).to.be.greaterThan(0);
    });

    it("Should measure decrement gas cost", async function () {
      await counter.increment();
      const tx = await counter.decrement();
      const receipt = await tx.wait();
      console.log("Decrement Gas Used:", receipt.gasUsed.toString());
      expect(receipt.gasUsed.toNumber()).to.be.greaterThan(0);
    });

    it("Should measure reset gas cost", async function () {
      await counter.increment();
      const tx = await counter.reset();
      const receipt = await tx.wait();
      console.log("Reset Gas Used:", receipt.gasUsed.toString());
      expect(receipt.gasUsed.toNumber()).to.be.greaterThan(0);
    });
  });
});
```