/*
 * Solidity Contract
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-09T19:17:18.661Z
 * AI Model: gemini-1.5-flash
 * Execution Time: 43.37s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BetterBrokenToken {
    string public name = "Better Broken Token";
    string public symbol = "BBT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 * 10**decimals;
    
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    address public owner;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor() {
        owner = msg.sender;
        _balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address to, uint256 amount) public returns (bool) {
        address sender = msg.sender;
        
        // BUG: No balance check - but won't cause compilation error
        // This will underflow in Solidity 0.8+ and revert
        require(amount > 0, "Transfer amount must be greater than zero");
        
        // This line will revert if sender doesn't have enough balance (good!)
        _balances[sender] = _balances[sender] - amount;
        _balances[to] = _balances[to] + amount;
        
        emit Transfer(sender, to, amount);
        return true;
    }
    
    function approve(address spender, uint256 amount) public returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    function allowance(address tokenOwner, address spender) public view returns (uint256) {
        return _allowances[tokenOwner][spender];
    }
    
    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        // BUG: We check allowance but don't decrease it!
        require(_allowances[from][msg.sender] >= amount, "Insufficient allowance");
        
        _balances[from] = _balances[from] - amount;
        _balances[to] = _balances[to] + amount;
        
        // Missing: _allowances[from][msg.sender] -= amount;
        
        emit Transfer(from, to, amount);
        return true;
    }
    
    // BUG: Owner can be anyone - no access control
    function setOwner(address newOwner) public {
        owner = newOwner;
    }
    
    // BUG: Anyone can mint unlimited tokens
    function mint(address to, uint256 amount) public returns (bool) {
        _balances[to] = _balances[to] + amount;
        totalSupply = totalSupply + amount;
        
        emit Transfer(address(0), to, amount);
        return true;
    }
}