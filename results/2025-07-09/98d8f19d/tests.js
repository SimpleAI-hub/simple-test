/*
 * Generated Tests
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-09T20:34:20.350Z
 * AI Model: gemini-1.5-flash
 * Execution Time: 49.37s
 * 
 * 🤖 This file was automatically generated
 * 🔗 Visit https://test.smplai.io to generate your own tests
 */

```javascript
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Greeter", function () {
  let greeter;
  let owner;
  let addr1;
  let addr2;

  beforeEach(async function () {
    [owner, addr1, addr2] = await ethers.getSigners();
    const Greeter = await ethers.getContractFactory("Greeter");
    greeter = await Greeter.deploy("Hello, world!");
    await greeter.deployed();
  });

  describe("Deployment", function () {
    it("Should set the right owner", async function () {
      expect(await greeter.owner()).to.equal(owner.address);
    });
    it("Should set the initial message", async function () {
      expect(await greeter.message()).to.equal("Hello, world!");
    });
    it("Should initialize greetingCount to 0", async function () {
      expect(await greeter.getGreetingCount()).to.equal(0);
    });
  });

  describe("Function Tests", function () {
    it("Should allow owner to set message", async function () {
      await greeter.setMessage("Good day!");
      expect(await greeter.message()).to.equal("Good day!");
    });
    it("Should increment greetingCount on greet", async function () {
      await greeter.greet();
      expect(await greeter.getGreetingCount()).to.equal(1);
    });
    it("Should return the current message on greet", async function () {
      expect(await greeter.greet()).to.equal("Hello, world!");
    });
    it("Should get the correct greeting count", async function () {
      await greeter.greet();
      await greeter.greet();
      expect(await greeter.getGreetingCount()).to.equal(2);
    });

  });

  describe("Edge Cases", function () {
    it("Should revert if non-owner tries to set message", async function () {
      await expect(greeter.connect(addr1).setMessage("test")).to.be.revertedWith("Only owner can set message");
    });
    it("Should handle empty message", async function () {
      await greeter.setMessage("");
      expect(await greeter.message()).to.equal("");
    });
    it("Should handle very long message", async function () {
      let longMessage = "";
      for (let i = 0; i < 1000; i++) {
        longMessage += "a";
      }
      await greeter.setMessage(longMessage);
      expect(await greeter.message()).to.equal(longMessage);
    });
    it("Should handle unicode characters", async function () {
      await greeter.setMessage("你好，世界！");
      expect(await greeter.message()).to.equal("你好，世界！");
    });
  });

  describe("Gas Usage", function () {
    it("setMessage gas cost should be reasonable", async function () {
      const tx = await greeter.setMessage("test");
      const receipt = await tx.wait();
      expect(receipt.gasUsed.toNumber()).to.be.lessThan(100000); // Adjust threshold as needed
    });
    it("greet gas cost should be reasonable", async function () {
      const tx = await greeter.greet();
      const receipt = await tx.wait();
      expect(receipt.gasUsed.toNumber()).to.be.lessThan(50000); // Adjust threshold as needed
    });
  });

  describe("Events", function () {
    it("Should emit no events", async function () {
        await expect(greeter.setMessage("new message")).to.emit(greeter, "MessageSet"); //Add event to contract if needed.
    });
  });


});
```
