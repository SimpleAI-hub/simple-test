/*
 * Generated Tests
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-10T04:35:36.780Z
 * AI Model: Simple AI V1.0.4
 * Execution Time: 24.88s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

```javascript
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("SimpleAIToken", function () {
  let SimpleAIToken;
  let simpleAIToken;
  let owner;
  let addr1;
  let addr2;

  beforeEach(async function () {
    [owner, addr1, addr2] = await ethers.getSigners();
    SimpleAIToken = await ethers.getContractFactory("SimpleAIToken");
    simpleAIToken = await SimpleAIToken.deploy();
    await simpleAIToken.waitForDeployment();
  });

  describe("Deployment", function () {
    it("Should set the right owner", async function () {
      expect(await simpleAIToken.owner()).to.equal(owner.address);
    });
    it("Should have correct initial supply", async function () {
      expect(await simpleAIToken.totalSupply()).to.equal(ethers.parseUnits("1000000", 18));
    });
    it("Should deploy with correct name and symbol", async function () {
      expect(await simpleAIToken.name()).to.equal("SimpleAI");
      expect(await simpleAIToken.symbol()).to.equal("SMPL");
    });
    it("Should set the tax wallet correctly", async function () {
      expect(await simpleAIToken.taxWallet()).to.equal(owner.address);
    });
    it("Should exclude owner and contract from tax", async function () {
      expect(await simpleAIToken.isExcludedFromTax(owner.address)).to.be.true;
      expect(await simpleAIToken.isExcludedFromTax(simpleAIToken.getAddress())).to.be.true;
    });

  });

  describe("Function Tests", function () {
    it("Should transfer tokens with tax deduction", async function () {
      const amount = ethers.parseUnits("100", 18);
      await simpleAIToken.transfer(addr1.address, amount);
      const ownerBalance = await simpleAIToken.balanceOf(owner.address);
      const addr1Balance = await simpleAIToken.balanceOf(addr1.address);
      expect(ownerBalance).to.equal(ethers.parseUnits("999900",18).sub(ethers.parseUnits("2",18)));
      expect(addr1Balance).to.equal(ethers.parseUnits("98", 18));
    });
    it("Should transfer tokens without tax for excluded address", async function () {
      await simpleAIToken.excludeFromTax(addr1.address, true);
      const amount = ethers.parseUnits("100", 18);
      await simpleAIToken.transfer(addr1.address, amount);
      const ownerBalance = await simpleAIToken.balanceOf(owner.address);
      const addr1Balance = await simpleAIToken.balanceOf(addr1.address);
      expect(ownerBalance).to.equal(ethers.parseUnits("999900", 18));
      expect(addr1Balance).to.equal(ethers.parseUnits("100", 18));

    });
    it("Should transfer using transferFrom", async function () {
      const amount = ethers.parseUnits("100", 18);
      await simpleAIToken.transfer(addr1.address, amount);
      await simpleAIToken.connect(addr1).transferFrom(addr1.address, addr2.address, ethers.parseUnits("50", 18));
      expect(await simpleAIToken.balanceOf(addr1.address)).to.equal(ethers.parseUnits("49",18));
      expect(await simpleAIToken.balanceOf(addr2.address)).to.equal(ethers.parseUnits("50", 18));
    });
    it("Should update tax rate", async function () {
      await simpleAIToken.setTaxRate(5);
      expect(await simpleAIToken.taxRate()).to.equal(5);
    });
    it("Should update tax wallet", async function () {
      await simpleAIToken.setTaxWallet(addr1.address);
      expect(await simpleAIToken.taxWallet()).to.equal(addr1.address);
    });
    it("Should exclude and include address from tax", async function () {
      await simpleAIToken.excludeFromTax(addr1.address, true);
      expect(await simpleAIToken.isExcludedFromTax(addr1.address)).to.be.true;
      await simpleAIToken.excludeFromTax(addr1.address, false);
      expect(await simpleAIToken.isExcludedFromTax(addr1.address)).to.be.false;
    });
    it("Should burn tokens", async function () {
        const initialBalance = await simpleAIToken.balanceOf(owner.address);
        await simpleAIToken.burn(ethers.parseUnits("100", 18));
        const finalBalance = await simpleAIToken.balanceOf(owner.address);
        expect(finalBalance).to.equal(initialBalance.sub(ethers.parseUnits("100", 18)));
    });
    it("Should emit TaxRateUpdated event", async function () {
        await expect(simpleAIToken.setTaxRate(5)).to.emit(simpleAIToken, "TaxRateUpdated").withArgs(5);
    });
    it("Should emit TaxWalletUpdated event", async function () {
        await expect(simpleAIToken.setTaxWallet(addr1.address)).to.emit(simpleAIToken, "TaxWalletUpdated").withArgs(addr1.address);
    });
  });

  describe("Edge Cases", function () {
    it("Should revert if tax rate is too high", async function () {
      await expect(simpleAIToken.setTaxRate(11)).to.be.revertedWith("Tax too high");
    });
    it("Should revert if setting tax wallet to zero address", async function () {
      await expect(simpleAIToken.setTaxWallet(ethers.ZeroAddress)).to.be.revertedWith("Invalid address");
    });
    it("Should revert if transfering more tokens than balance", async function () {
        const amount = ethers.parseUnits("1000001", 18);
        await expect(simpleAIToken.transfer(addr1.address, amount)).to.be.reverted;
    });
    it("Should revert if burning more tokens than balance", async function () {
        const amount = ethers.parseUnits("1000001", 18);
        await expect(simpleAIToken.burn(amount)).to.be.reverted;
    });
  });
    describe("Gas Usage", function () {
        it("Should measure gas usage for transfer", async function () {
            const tx = await simpleAIToken.transfer(addr1.address, ethers.parseUnits("100", 18));
            const receipt = await tx.wait();
            console.log("Gas used for transfer:", receipt.gasUsed.toString());
        });
        it("Should measure gas usage for burn", async function () {
            const tx = await simpleAIToken.burn(ethers.parseUnits("100", 18));
            const receipt = await tx.wait();
            console.log("Gas used for burn:", receipt.gasUsed.toString());
        });

    });

});
```
