{
  "contractHash": "798411b3",
  "executionResults": {
    "success": true,
    "output": "\n\n  SimpleAIToken\n    Deployment\n      ✔ Should set the right owner\n      ✔ Should have the correct initial supply\n      ✔ Should have the correct initial tax rate\n      ✔ Should set the owner as tax wallet initially\n      1) Should exclude owner and contract from tax\n    Function Tests\n      2) Should transfer tokens without tax for excluded address\n      3) Should transfer tokens with tax deduction\n      ✔ Should set tax rate\n      ✔ Should set tax wallet\n      ✔ Should exclude/include addresses from tax\n      ✔ Should burn tokens\n      4) Should transferFrom tokens with tax\n    Edge Cases\n      ✔ Should revert if trying to set tax rate above 10%\n      ✔ Should revert if trying to set tax wallet to zero address\n      ✔ Should revert if trying to burn more tokens than balance\n      ✔ Should emit TaxRateUpdated event\n      ✔ Should emit TaxWalletUpdated event\n\n\n  13 passing (803ms)\n  4 failing\n\n  1) SimpleAIToken\n       Deployment\n         Should exclude owner and contract from tax:\n     TypeError: unsupported addressable value (argument=\"target\", value=null, code=INVALID_ARGUMENT, version=6.15.0)\n      at makeError (node_modules/ethers/src.ts/utils/errors.ts:691:21)\n      at assert (node_modules/ethers/src.ts/utils/errors.ts:719:25)\n      at assertArgument (node_modules/ethers/src.ts/utils/errors.ts:731:5)\n      at resolveAddress (node_modules/ethers/src.ts/address/checks.ts:122:19)\n      at /home/dustin/simple-test/backend/temp/project_798411b3/node_modules/ethers/src.ts/contract/contract.ts:172:60\n      at ParamType.#walkAsync (node_modules/ethers/src.ts/abi/fragments.ts:779:24)\n      at ParamType.walkAsync (node_modules/ethers/src.ts/abi/fragments.ts:797:24)\n      at /home/dustin/simple-test/backend/temp/project_798411b3/node_modules/ethers/src.ts/contract/contract.ts:170:22\n      at Array.map (<anonymous>)\n      at resolveArgs (node_modules/ethers/src.ts/contract/contract.ts:169:37)\n\n  2) SimpleAIToken\n       Function Tests\n         Should transfer tokens without tax for excluded address:\n\n      AssertionError: expected 999900000000000000000000 to equal 0.\n      + expected - actual\n\n      -999900000000000000000000\n      +0\n      \n      at Context.<anonymous> (test/SimpleAIToken.test.js:48:65)\n\n  3) SimpleAIToken\n       Function Tests\n         Should transfer tokens with tax deduction:\n     TypeError: Cannot mix BigInt and other types, use explicit conversions\n      at Context.<anonymous> (test/SimpleAIToken.test.js:54:41)\n\n  4) SimpleAIToken\n       Function Tests\n         Should transferFrom tokens with tax:\n     Error: VM Exception while processing transaction: reverted with reason string 'ERC20: insufficient allowance'\n    at SimpleAIToken.decreaseAllowance (@openzeppelin/contracts/token/ERC20/ERC20.sol:200)\n    at SimpleAIToken.transferFrom (@openzeppelin/contracts/token/ERC20/ERC20.sol:160)\n    at EdrProviderWrapper.request (node_modules/hardhat/src/internal/hardhat-network/provider/provider.ts:359:41)\n    at HardhatEthersSigner.sendTransaction (node_modules/@nomicfoundation/hardhat-ethers/src/signers.ts:181:18)\n    at send (node_modules/ethers/src.ts/contract/contract.ts:313:20)\n    at Proxy.transferFrom (node_modules/ethers/src.ts/contract/contract.ts:352:16)\n    at Context.<anonymous> (test/SimpleAIToken.test.js:89:23)\n  \n\n\n\n",
    "executionTime": "12.46s",
    "testsPassed": {
      "passed": 13,
      "failed": 4,
      "individual": [
        {
          "name": "Should set the right owner",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should have the correct initial supply",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should have the correct initial tax rate",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should set the owner as tax wallet initially",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should exclude owner and contract from tax",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should transfer tokens without tax for excluded address",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should transfer tokens with tax deduction",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should set tax rate",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should set tax wallet",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should exclude/include addresses from tax",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should burn tokens",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should transferFrom tokens with tax",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if trying to set tax rate above 10%",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if trying to set tax wallet to zero address",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if trying to burn more tokens than balance",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should emit TaxRateUpdated event",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should emit TaxWalletUpdated event",
          "passed": true,
          "describe": "SimpleAIToken"
        }
      ]
    },
    "gasUsage": null
  },
  "metadata": {
    "model": "Simple AI V1.0.4",
    "tokensUsed": 0,
    "generatedAt": "2025-07-10T04:44:14.411Z",
    "totalExecutionTime": "23.28s",
    "hardhatVersion": "2.22.0",
    "compiler": "solc 0.8.19"
  },
  "timestamp": "2025-07-10T04:44:27.641Z"
}