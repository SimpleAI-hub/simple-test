/*
 * Generated Tests
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-10T03:38:40.805Z
 * AI Model: gemini-1.5-flash
 * Execution Time: 58.28s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

```javascript
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("SimpleStorage", function () {
  let SimpleStorage;
  let simpleStorage;
  let owner;
  let addr1;
  let addr2;

  beforeEach(async function () {
    [owner, addr1, addr2] = await ethers.getSigners();
    SimpleStorage = await ethers.getContractFactory("SimpleStorage");
    simpleStorage = await SimpleStorage.deploy();
  });

  describe("Deployment", function () {
    it("Should set the right owner", async function () {
      expect(await simpleStorage.owner()).to.equal(owner.address);
    });
    it("Should initialize storedNumber to 42", async function () {
      expect(await simpleStorage.getNumber()).to.equal(42);
    });
  });

  describe("Function Tests", function () {
    it("Should set the number correctly", async function () {
      await simpleStorage.setNumber(100);
      expect(await simpleStorage.getNumber()).to.equal(100);
    });
    it("Should emit NumberChanged event", async function () {
      await expect(simpleStorage.setNumber(100))
        .to.emit(simpleStorage, "NumberChanged")
        .withArgs(42, 100);
    });
    it("Should double the number correctly", async function () {
      await simpleStorage.doubleNumber();
      expect(await simpleStorage.getNumber()).to.equal(84);
    });
    it("Should emit NumberChanged event on double", async function () {
      await expect(simpleStorage.doubleNumber())
        .to.emit(simpleStorage, "NumberChanged")
        .withArgs(42, 84);
    });
  });

  describe("Edge Cases", function () {
    it("Should revert if a non-owner tries to set the number", async function () {
      await expect(simpleStorage.connect(addr1).setNumber(100)).to.be.revertedWith("Only owner can set number");
    });
    it("Should revert if a non-owner tries to double the number", async function () {
      await expect(simpleStorage.connect(addr1).doubleNumber()).to.be.revertedWith("Only owner can double");
    });
    it("Should handle large numbers", async function () {
      const largeNumber = ethers.toBigInt("115792089237316195423570985008687907853269984665640564039457584007913129639935");
      await simpleStorage.setNumber(largeNumber);
      expect(await simpleStorage.getNumber()).to.equal(largeNumber);
    });
    it("Should handle zero", async function () {
      await simpleStorage.setNumber(0);
      expect(await simpleStorage.getNumber()).to.equal(0);
    });
    it("Gas usage test for setNumber", async function () {
        const tx = await simpleStorage.setNumber(100);
        const receipt = await tx.wait();
        expect(receipt.gasUsed).to.be.gt(0);
    });
    it("Gas usage test for doubleNumber", async function () {
        const tx = await simpleStorage.doubleNumber();
        const receipt = await tx.wait();
        expect(receipt.gasUsed).to.be.gt(0);
    });
  });
});
```
