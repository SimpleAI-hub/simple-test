/*
 * Solidity Contract
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-10T04:22:38.845Z
 * AI Model: Simple AI V1.0.4
 * Execution Time: 25.02s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract SimpleAIToken is ERC20, Ownable, ReentrancyGuard {
    uint256 private constant TOTAL_SUPPLY = 100_000_000 * 10**18;
    uint256 public constant BUY_FEE = 4;
    uint256 public constant SELL_FEE = 4;
    uint256 public constant FEE_DENOMINATOR = 100;
    
    uint256 public swapThreshold = 500_000 * 10**18;
    
    address public immutable taxWallet;
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    
    mapping(address => bool) public automatedMarketMakerPairs;
    
    event SwapThresholdUpdated(uint256 newThreshold);
    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived);
    event AutomatedMarketMakerPairUpdated(address pair, bool value);
    
    constructor() ERC20("SimpleAI", "SMPL") Ownable(msg.sender) {
        taxWallet = 0x866D5fD31b58ab9AB9FAcD00523EcC3e16A79300;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
            
        uniswapV2Router = _uniswapV2Router;
        
        automatedMarketMakerPairs[uniswapV2Pair] = true;
        emit AutomatedMarketMakerPairUpdated(uniswapV2Pair, true);
        
        _mint(owner(), TOTAL_SUPPLY);
    }
    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        require(amount == 0 || allowance(msg.sender, spender) == 0, "ERC20: unsafe allowance");
        return super.approve(spender, amount);
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    function _update(address from, address to, uint256 amount) internal virtual override {
        if (amount == 0) {
            super._update(from, to, 0);
            return;
        }
        
        uint256 fee = 0;
        
        if (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]) {
            if (automatedMarketMakerPairs[from]) {
                fee = (amount * BUY_FEE) / FEE_DENOMINATOR;
            } else {
                fee = (amount * SELL_FEE) / FEE_DENOMINATOR;
                
                uint256 contractTokenBalance = balanceOf(address(this));
                if (contractTokenBalance >= swapThreshold) {
                    swapTokensForEth(contractTokenBalance);
                }
            }
        }
        
        if (fee > 0) {
            super._update(from, address(this), fee);
            amount -= fee;
        }
        
        super._update(from, to, amount);
    }
    
    function setSwapThreshold(uint256 newThreshold) external onlyOwner {
        require(newThreshold > 0, "Threshold must be greater than 0");
        swapThreshold = newThreshold;
        emit SwapThresholdUpdated(newThreshold);
    }
    
    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {
        require(pair != uniswapV2Pair, "Cannot remove initial pair");
        automatedMarketMakerPairs[pair] = value;
        emit AutomatedMarketMakerPairUpdated(pair, value);
    }
    
    function swapTokensForEth(uint256 tokenAmount) private nonReentrant {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        
        uint256 initialETHBalance = address(this).balance;
        
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            taxWallet,
            block.timestamp
        );
        
        uint256 ethReceived = address(this).balance - initialETHBalance;
        emit SwapAndLiquify(tokenAmount, ethReceived);
    }
    
    function withdrawStuckETH() external onlyOwner {
        (bool success,) = taxWallet.call{value: address(this).balance}("");
        require(success, "ETH transfer failed");
    }

    function withdrawStuckTokens(address token) external onlyOwner {
        require(token != address(this), "Cannot withdraw fee token");
        IERC20(token).transfer(taxWallet, IERC20(token).balanceOf(address(this)));
    }
    
    function renounceOwnership() public virtual override onlyOwner {
        super.renounceOwnership();
    }
    
    receive() external payable {}
}