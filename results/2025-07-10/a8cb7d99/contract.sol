/*
 * Solidity Contract
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-10T04:30:25.157Z
 * AI Model: Simple AI V1.0.4
 * Execution Time: 26.91s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

// SPDX-License-Identifier: MIT
  pragma solidity ^0.8.19;

  import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  import "@openzeppelin/contracts/access/Ownable.sol";
  import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

  contract SimpleAIToken is ERC20, Ownable, ReentrancyGuard {
      uint256 public constant MAX_SUPPLY = 1000000 * 10**18; // 1 million tokens
      uint256 public taxRate = 2; // 2% tax
      address public taxWallet;

      mapping(address => bool) public isExcludedFromTax;

      event TaxRateUpdated(uint256 newRate);
      event TaxWalletUpdated(address newWallet);

      constructor() ERC20("SimpleAI", "SMPL") {
          taxWallet = msg.sender;
          isExcludedFromTax[msg.sender] = true;
          isExcludedFromTax[address(this)] = true;
          _mint(msg.sender, MAX_SUPPLY);
      }

      function setTaxRate(uint256 _taxRate) external onlyOwner {
          require(_taxRate <= 10, "Tax too high");
          taxRate = _taxRate;
          emit TaxRateUpdated(_taxRate);
      }

      function setTaxWallet(address _taxWallet) external onlyOwner {
          require(_taxWallet != address(0), "Invalid address");
          taxWallet = _taxWallet;
          emit TaxWalletUpdated(_taxWallet);
      }

      function excludeFromTax(address account, bool excluded) external onlyOwner {
          isExcludedFromTax[account] = excluded;
      }

      function _transfer(
          address from,
          address to,
          uint256 amount
      ) internal override {
          if (isExcludedFromTax[from] || isExcludedFromTax[to]) {
              super._transfer(from, to, amount);
          } else {
              uint256 taxAmount = (amount * taxRate) / 100;
              uint256 transferAmount = amount - taxAmount;

              super._transfer(from, taxWallet, taxAmount);
              super._transfer(from, to, transferAmount);
          }
      }

      function burn(uint256 amount) external {
          _burn(msg.sender, amount);
      }

      // v1 - SimpleAI Token with tax system
//v3
  }