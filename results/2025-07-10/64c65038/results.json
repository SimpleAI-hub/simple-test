{
  "contractHash": "64c65038",
  "executionResults": {
    "success": true,
    "output": "\n\n  SimpleAIToken\n    Deployment\n      ✔ Should set the right owner\n      ✔ Should have correct initial supply\n      ✔ Should have correct name and symbol\n      ✔ Should set tax wallet correctly\n      ✔ Owner should be excluded from tax\n      ✔ Contract should be excluded from tax\n    Function Tests\n      1) Should transfer with tax deduction\n      2) Should transfer without tax for excluded address\n      3) Should transfer using transferFrom\n      ✔ Should update tax rate\n      ✔ Should update tax wallet\n      ✔ Should exclude and include from tax\n      ✔ Should burn tokens\n    Edge Cases\n      ✔ Should revert if tax rate is too high\n      ✔ Should revert if setting tax wallet to zero address\n      ✔ Should revert if transfer amount exceeds balance\n      ✔ Should revert if burn amount exceeds balance\n      ✔ Should revert if transferFrom amount exceeds allowance\n      ✔ Should emit TaxRateUpdated event\n      ✔ Should emit TaxWalletUpdated event\n\n\n  17 passing (831ms)\n  3 failing\n\n  1) SimpleAIToken\n       Function Tests\n         Should transfer with tax deduction:\n     TypeError: Cannot mix BigInt and other types, use explicit conversions\n      at Context.<anonymous> (test/SimpleAIToken.test.js:48:39)\n\n  2) SimpleAIToken\n       Function Tests\n         Should transfer without tax for excluded address:\n     TypeError: Cannot read properties of undefined (reading '0')\n      at Context.<anonymous> (test/SimpleAIToken.test.js:62:34)\n\n  3) SimpleAIToken\n       Function Tests\n         Should transfer using transferFrom:\n     Error: VM Exception while processing transaction: reverted with reason string 'ERC20: insufficient allowance'\n    at SimpleAIToken.decreaseAllowance (@openzeppelin/contracts/token/ERC20/ERC20.sol:200)\n    at SimpleAIToken.transferFrom (@openzeppelin/contracts/token/ERC20/ERC20.sol:160)\n    at EdrProviderWrapper.request (node_modules/hardhat/src/internal/hardhat-network/provider/provider.ts:359:41)\n    at HardhatEthersSigner.sendTransaction (node_modules/@nomicfoundation/hardhat-ethers/src/signers.ts:181:18)\n    at send (node_modules/ethers/src.ts/contract/contract.ts:313:20)\n    at Proxy.transferFrom (node_modules/ethers/src.ts/contract/contract.ts:352:16)\n    at Context.<anonymous> (test/SimpleAIToken.test.js:67:13)\n  \n\n\n\n",
    "executionTime": "48.13s",
    "testsPassed": {
      "passed": 17,
      "failed": 3,
      "individual": [
        {
          "name": "Should set the right owner",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should have correct initial supply",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should have correct name and symbol",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should set tax wallet correctly",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Owner should be excluded from tax",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Contract should be excluded from tax",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should transfer with tax deduction",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should transfer without tax for excluded address",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should transfer using transferFrom",
          "passed": false,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should update tax rate",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should update tax wallet",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should exclude and include from tax",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should burn tokens",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if tax rate is too high",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if setting tax wallet to zero address",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if transfer amount exceeds balance",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if burn amount exceeds balance",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should revert if transferFrom amount exceeds allowance",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should emit TaxRateUpdated event",
          "passed": true,
          "describe": "SimpleAIToken"
        },
        {
          "name": "Should emit TaxWalletUpdated event",
          "passed": true,
          "describe": "SimpleAIToken"
        }
      ]
    },
    "gasUsage": null
  },
  "metadata": {
    "model": "Simple AI V1.0.4",
    "tokensUsed": 0,
    "generatedAt": "2025-07-10T04:32:50.424Z",
    "totalExecutionTime": "60.46s",
    "hardhatVersion": "2.22.0",
    "compiler": "solc 0.8.19"
  },
  "timestamp": "2025-07-10T04:33:39.247Z"
}