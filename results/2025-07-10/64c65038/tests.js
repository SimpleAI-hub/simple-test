/*
 * Generated Tests
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-10T04:32:50.424Z
 * AI Model: Simple AI V1.0.4
 * Execution Time: 60.46s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

```javascript
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("SimpleAIToken", function () {
    let SimpleAIToken;
    let simpleAiToken;
    let owner;
    let addr1;
    let addr2;
    let initialSupply;

    beforeEach(async function () {
        [owner, addr1, addr2] = await ethers.getSigners();
        const Contract = await ethers.getContractFactory("SimpleAIToken");
        simpleAiToken = await Contract.deploy();
        await simpleAiToken.waitForDeployment();
        initialSupply = ethers.parseUnits("1000000", 18);
    });

    describe("Deployment", function () {
        it("Should set the right owner", async function () {
            expect(await simpleAiToken.owner()).to.equal(owner.address);
        });
        it("Should have correct initial supply", async function () {
            expect(await simpleAiToken.balanceOf(owner.address)).to.equal(initialSupply);
        });
        it("Should have correct name and symbol", async function () {
            expect(await simpleAiToken.name()).to.equal("SimpleAI");
            expect(await simpleAiToken.symbol()).to.equal("SMPL");
        });
        it("Should set tax wallet correctly", async function () {
            expect(await simpleAiToken.taxWallet()).to.equal(owner.address);
        });
        it("Owner should be excluded from tax", async function () {
            expect(await simpleAiToken.isExcludedFromTax(owner.address)).to.be.true;
        });
        it("Contract should be excluded from tax", async function () {
            expect(await simpleAiToken.isExcludedFromTax(simpleAiToken.getAddress())).to.be.true;
        });

    });

    describe("Function Tests", function () {
        it("Should transfer with tax deduction", async function () {
            const amount = ethers.parseUnits("100", 18);
            const tx = await simpleAiToken.transfer(addr1.address, amount);
            const receipt = await tx.wait();
            const taxAmount = (amount * 2) / 100;
            const transferAmount = amount - taxAmount;
            expect(await simpleAiToken.balanceOf(addr1.address)).to.equal(transferAmount);
            expect(await simpleAiToken.balanceOf(owner.address)).to.equal(initialSupply - amount);
            expect(await simpleAiToken.balanceOf(await simpleAiToken.taxWallet())).to.equal(taxAmount);
            expect(receipt.events[0].event).to.equal("Transfer");
        });
        it("Should transfer without tax for excluded address", async function () {
            await simpleAiToken.excludeFromTax(addr1.address, true);
            const amount = ethers.parseUnits("100", 18);
            const tx = await simpleAiToken.transfer(addr1.address, amount);
            const receipt = await tx.wait();
            expect(await simpleAiToken.balanceOf(addr1.address)).to.equal(amount);
            expect(await simpleAiToken.balanceOf(owner.address)).to.equal(initialSupply - amount);
            expect(receipt.events[0].event).to.equal("Transfer");
        });
        it("Should transfer using transferFrom", async function () {
            const amount = ethers.parseUnits("100", 18);
            await simpleAiToken.transfer(addr1.address, amount);
            await simpleAiToken.connect(addr1).transferFrom(addr1.address, addr2.address, amount);
            expect(await simpleAiToken.balanceOf(addr2.address)).to.equal(amount);
            expect(await simpleAiToken.balanceOf(addr1.address)).to.equal(0);
        });
        it("Should update tax rate", async function () {
            await simpleAiToken.setTaxRate(5);
            expect(await simpleAiToken.taxRate()).to.equal(5);
        });
        it("Should update tax wallet", async function () {
            await simpleAiToken.setTaxWallet(addr1.address);
            expect(await simpleAiToken.taxWallet()).to.equal(addr1.address);
        });
        it("Should exclude and include from tax", async function () {
            await simpleAiToken.excludeFromTax(addr1.address, true);
            expect(await simpleAiToken.isExcludedFromTax(addr1.address)).to.be.true;
            await simpleAiToken.excludeFromTax(addr1.address, false);
            expect(await simpleAiToken.isExcludedFromTax(addr1.address)).to.be.false;
        });
        it("Should burn tokens", async function () {
            const amount = ethers.parseUnits("100", 18);
            await simpleAiToken.burn(amount);
            expect(await simpleAiToken.balanceOf(owner.address)).to.equal(initialSupply - amount);
        });
    });

    describe("Edge Cases", function () {
        it("Should revert if tax rate is too high", async function () {
            await expect(simpleAiToken.setTaxRate(11)).to.be.revertedWith("Tax too high");
        });
        it("Should revert if setting tax wallet to zero address", async function () {
            await expect(simpleAiToken.setTaxWallet(ethers.ZeroAddress)).to.be.revertedWith("Invalid address");
        });
        it("Should revert if transfer amount exceeds balance", async function () {
            const amount = ethers.parseUnits("1000001", 18);
            await expect(simpleAiToken.transfer(addr1.address, amount)).to.be.reverted;
        });
        it("Should revert if burn amount exceeds balance", async function () {
            const amount = ethers.parseUnits("1000001", 18);
            await expect(simpleAiToken.burn(amount)).to.be.reverted;
        });
        it("Should revert if transferFrom amount exceeds allowance", async function () {
            const amount = ethers.parseUnits("100", 18);
            await expect(simpleAiToken.connect(addr1).transferFrom(owner.address, addr2.address, amount)).to.be.reverted;
        });
        it("Should emit TaxRateUpdated event", async function () {
            await expect(simpleAiToken.setTaxRate(5)).to.emit(simpleAiToken, "TaxRateUpdated").withArgs(5);
        });
        it("Should emit TaxWalletUpdated event", async function () {
            await expect(simpleAiToken.setTaxWallet(addr1.address)).to.emit(simpleAiToken, "TaxWalletUpdated").withArgs(addr1.address);
        });
    });
});

```
