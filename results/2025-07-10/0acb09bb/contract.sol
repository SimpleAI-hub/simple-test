/*
 * Solidity Contract
 * Generated by Simple Test - AI-Powered Solidity Testing
 * 
 * Contract Hash: unknown
 * Generated At: 2025-07-10T12:21:56.384Z
 * AI Model: Simple AI V1.0.4
 * Execution Time: 71.22s
 * 
 * ðŸ¤– This file was automatically generated
 * ðŸ”— Visit https://test.smplai.io to generate your own tests
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

// Interfaces for ERC20 and Uniswap
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


/**
 * @title The Peoples Token (PEOPLE)
 * @dev A standard token with configurable fees, defaulted to zero.
 * * Features:
 * - Default 0% buy and sell tax.
 * - Owner can set fees for marketing and burning.
 * - Automatic liquidity pair creation on deployment.
 * - Transaction and max wallet limits.
 * - Anti-dump mechanism for initial launch blocks.
 * - Fee exemptions and blacklisting capabilities.
 */
contract ThePeoplesToken is IERC20 {
    // Constants
    address constant DEAD = 0x000000000000000000000000000000000000dEaD;
    address constant ZERO = 0x0000000000000000000000000000000000000000;

    string constant _name = "The Peopls Token";
    string constant _symbol = "PEOPLE";
    uint8 constant _decimals = 18;

    // Token supply
    uint256 _totalSupply = 1_000_000_000 * (10 ** _decimals); // 1 billion

    // Mappings
    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) _allowances;
    mapping (address => bool) isFeeExempt;
    mapping (address => bool) isTxLimitExempt;
    mapping (address => bool) isMaxWalletExempt;
    mapping (address => bool) isBlacklisted;

    // Fee variables (out of 1000) - DEFAULTED TO ZERO
    // Buy fees: 0% total
    uint256 public buyMarketingFee = 0; 
    uint256 public buyTotalFee = 0;
    
    // Sell fees: 0% total
    uint256 public sellMarketingFee = 0;
    uint256 public sellBurnFee = 0;
    uint256 public sellTotalFee = 0;
    
    uint256 public constant feeDenominator = 1000;

    // Transaction limits
    uint256 public _maxTxAmount = _totalSupply / 100; // 1%
    uint256 public _maxWallet = _totalSupply / 50; // 2%

    // Wallets
    address public owner;
    address public marketingFeeReceiver;

    // Router and pair
    IUniswapV2Router02 public immutable router;
    address public immutable pair;

    // Launch control
    uint256 public launchedAt;
    uint256 public launchedAtTimestamp;
    uint256 public antiDumpBlocks = 2;
    uint256 public antiDumpFee = 250; // 25% for first 2 blocks

    // Swap settings
    bool public swapEnabled = true;
    uint256 public swapThreshold = _totalSupply / 2000; // 0.05%
    bool inSwap;
    modifier swapping() { inSwap = true; _; inSwap = false; }

    // Events
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event MarketingFeeReceived(uint256 amount);
    event MaxTxAmountUpdated(uint256 amount);
    event MaxWalletUpdated(uint256 amount);
    event FeesUpdated(uint256 buyMarketing, uint256 sellMarketing, uint256 sellBurn);

    constructor () {
        owner = msg.sender;
        
        // --- IMPORTANT: Set the correct router address for your target network ---
        // Mainnet: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        // BSC:     0x10ED43C718714eb63d5aA57B78B54704E256024E
        // Sepolia: 0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008
        router = IUniswapV2Router02(0xD85558c4dFB8D2fcb9Bd16292622F0600de717fA); 
        
        // Create a Uniswap pair for this new token
        pair = IUniswapV2Factory(router.factory()).createPair(router.WETH(), address(this));
        _allowances[address(this)][address(router)] = type(uint256).max;

        // Fee exemptions
        isFeeExempt[msg.sender] = true;
        isFeeExempt[address(this)] = true;
        
        // Transaction limit exemptions
        isTxLimitExempt[msg.sender] = true;
        isTxLimitExempt[address(this)] = true;
        isTxLimitExempt[address(router)] = true;
        
        // Max wallet exemptions
        isMaxWalletExempt[msg.sender] = true;
        isMaxWalletExempt[address(this)] = true;
        isMaxWalletExempt[pair] = true;
        isMaxWalletExempt[address(router)] = true;
        isMaxWalletExempt[DEAD] = true;
        isMaxWalletExempt[ZERO] = true;
        
        // Set fee receivers
        marketingFeeReceiver = msg.sender;

        // Mint supply to owner
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    receive() external payable {}

    // Basic token functions
    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function decimals() external pure override returns (uint8) { return _decimals; }
    function symbol() external pure override returns (string memory) { return _symbol; }
    function name() external pure override returns (string memory) { return _name; }
    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, type(uint256).max);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        if(_allowances[sender][msg.sender] != type(uint256).max){
            require(_allowances[sender][msg.sender] >= amount, "Insufficient Allowance");
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }

        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        require(!isBlacklisted[sender] && !isBlacklisted[recipient], "Blacklisted");
        require(amount > 0, "Zero amount");
        
        if(inSwap){ return _basicTransfer(sender, recipient, amount); }
        
        // Check limits
        checkTxLimit(sender, amount);
        
        // Check max wallet BEFORE any transfers
        if (!isMaxWalletExempt[recipient]) {
            require(_balances[recipient] + amount <= _maxWallet, "Max wallet exceeded");
        }
        
        // Launch check
        if(!launched() && recipient == pair){ 
            require(_balances[sender] > 0 && sender == owner, "Only owner can add liquidity");
            launch();
        }

        // Check if we should swap accumulated fees
        if(shouldSwapBack()){ swapBack(); }

        // Do transfer
        require(_balances[sender] >= amount, "Insufficient balance");
        _balances[sender] = _balances[sender] - amount;

        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;
        _balances[recipient] = _balances[recipient] + amountReceived;

        emit Transfer(sender, recipient, amountReceived);
        return true;
    }
    
    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        require(_balances[sender] >= amount, "Insufficient balance");
        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function checkTxLimit(address sender, uint256 amount) internal view {
        require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");
    }

    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {
        return !isFeeExempt[sender] && !isFeeExempt[recipient] && launched();
    }

    function getTotalFee(bool selling) public view returns (uint256) {
        if(launchedAt > 0 && launchedAt + antiDumpBlocks >= block.number){ return antiDumpFee; }
        if(selling) return sellTotalFee;
        return buyTotalFee;
    }

    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
        bool selling = recipient == pair;
        uint256 feeAmount = amount * getTotalFee(selling) / feeDenominator;
        
        if (feeAmount == 0) {
            return amount;
        }
        
        if(selling && sellBurnFee > 0) {
            uint256 burnAmount = amount * sellBurnFee / feeDenominator;
            _balances[DEAD] = _balances[DEAD] + burnAmount;
            emit Transfer(sender, DEAD, burnAmount);
            
            uint256 contractAmount = feeAmount - burnAmount;
            if (contractAmount > 0) {
                _balances[address(this)] = _balances[address(this)] + contractAmount;
                emit Transfer(sender, address(this), contractAmount);
            }
        } else {
            _balances[address(this)] = _balances[address(this)] + feeAmount;
            emit Transfer(sender, address(this), feeAmount);
        }

        return amount - feeAmount;
    }

    function shouldSwapBack() internal view returns (bool) {
        return msg.sender != pair
        && !inSwap
        && swapEnabled
        && _balances[address(this)] >= swapThreshold
        && launched();
    }

    function swapBack() internal swapping {
        uint256 contractTokenBalance = swapThreshold;
        
        if(_balances[address(this)] < contractTokenBalance) {
            contractTokenBalance = _balances[address(this)];
        }

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();
        uint256 balanceBefore = address(this).balance;

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            contractTokenBalance,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountETH = address(this).balance - balanceBefore;
        
        // If fees are enabled, send collected ETH to marketing wallet
        if(amountETH > 0){
            (bool success,) = payable(marketingFeeReceiver).call{value: amountETH, gas: 30000}("");
            if(success) emit MarketingFeeReceived(amountETH);
        }
    }

    function launched() internal view returns (bool) {
        return launchedAt != 0;
    }

    function launch() internal {
        launchedAt = block.number;
        launchedAtTimestamp = block.timestamp;
    }

    // --- Owner Functions ---
    modifier onlyOwner() {
        require(msg.sender == owner, "!Owner");
        _;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function setMaxTxPercent(uint256 percent) external onlyOwner {
        require(percent >= 10, "Min 0.1%");
        _maxTxAmount = _totalSupply * percent / 10000;
        emit MaxTxAmountUpdated(_maxTxAmount);
    }

    function setMaxWalletPercent(uint256 percent) external onlyOwner {
        require(percent >= 50, "Min 0.5%");
        _maxWallet = _totalSupply * percent / 10000;
        emit MaxWalletUpdated(_maxWallet);
    }

    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {
        isFeeExempt[holder] = exempt;
    }

    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {
        isTxLimitExempt[holder] = exempt;
    }

    function setIsMaxWalletExempt(address holder, bool exempt) external onlyOwner {
        isMaxWalletExempt[holder] = exempt;
    }

    function setFees(
        uint256 _buyMarketingFee, 
        uint256 _sellMarketingFee, 
        uint256 _sellBurnFee
    ) external onlyOwner {
        buyMarketingFee = _buyMarketingFee;
        buyTotalFee = _buyMarketingFee;
        
        sellMarketingFee = _sellMarketingFee;
        sellBurnFee = _sellBurnFee;
        sellTotalFee = _sellMarketingFee + _sellBurnFee;
        
        require(buyTotalFee <= 100, "Buy fees max 10%");
        require(sellTotalFee <= 150, "Sell fees max 15%");
        
        emit FeesUpdated(_buyMarketingFee, _sellMarketingFee, _sellBurnFee);
    }

    function setFeeReceivers(address _marketingFeeReceiver) external onlyOwner {
        require(_marketingFeeReceiver != address(0), "Zero address");
        marketingFeeReceiver = _marketingFeeReceiver;
    }

    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {
        swapEnabled = _enabled;
        swapThreshold = _amount;
    }

    function blacklistAddress(address account, bool blacklisted) external onlyOwner {
        isBlacklisted[account] = blacklisted;
    }

    function setAntiDumpSettings(uint256 blocks, uint256 fee) external onlyOwner {
        require(blocks <= 5, "Too many blocks");
        require(fee <= 500, "Fee max 50%");
        antiDumpBlocks = blocks;
        antiDumpFee = fee;
    }
    
    // --- Utility Functions ---
    function clearStuckBalance() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }

    function clearStuckToken(address tokenAddress) external onlyOwner {
        require(tokenAddress != address(this), "Cannot withdraw own token");
        IERC20(tokenAddress).transfer(owner, IERC20(tokenAddress).balanceOf(address(this)));
    }

    function getCirculatingSupply() external view returns (uint256) {
        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);
    }
    
    function getTotalBurned() external view returns (uint256) {
        return balanceOf(DEAD);
    }
}